//Assignment 2: Using card deck in card games. By Lexin Ma 1/22/2020

//main class to instantiate deck and hand objects for dealing cards and display
import java.util.*;

public class Foothill
{
   static String result;
   static String dealCardString(Deck deck)
   {
      result = "";
      while(deck.topcard() > 0)
         result += deck.dealCard();
      
      return result;
   }

   
   public static void main(String[] args)
   {
      //phase 1:  
      Deck deck1, deck2, deck3, deck4;
      
      deck1 = new Deck(2);
      System.out.println("\n" + dealCardString(deck1));
      
      deck2 = new Deck(2);
      deck2.shuffle();
      System.out.println("\n" + dealCardString(deck2));
      
      deck3 = new Deck(1);
      System.out.println("\n" + dealCardString(deck3));
      
      deck4 = new Deck(1);
      deck4.shuffle();
      System.out.println("\n" + dealCardString(deck4));
      
      //phase 2:
      
      Scanner in = new Scanner(System.in);
      
      System.out.println("\n How many players in the game? (1 to 10) \n");
      int numplayer = in.nextInt();
      in.close();
      
      Deck deck5 = new Deck(1);
      Hand[] hands = new Hand[numplayer];
      for(int i =0; i < numplayer; i++)
      {
         hands[i] = new Hand();
      }
      
      //deal cards to hands
      int currentIndex = 0;
      while(deck5.topcard() > 0)
      {
         hands[currentIndex].takeCard(deck5.dealCard());
         currentIndex++;
         currentIndex = currentIndex % numplayer;
      }   
      for(int i =0; i < numplayer; i++)
      {
         System.out.println(hands[i]);
      }
      
      //reset hand, shuffle cards, deal cards
      for(int i =0; i < numplayer; i++)
      {
         hands[i].resetHand();
      }
      
      Deck deck6 = new Deck(1);
      deck6.shuffle();
      
      currentIndex = 0;
      while(deck6.topcard() > 0)
      {
         hands[currentIndex].takeCard(deck6.dealCard());
         currentIndex++;
         currentIndex = currentIndex % numplayer;
      }
      System.out.println("\n Here are hands from shuffled deck");
      for(int i =0; i < numplayer; i++)
      {
         System.out.println(hands[i]);
      }
     
   }
}

//card class for setting and getting cards

public class Card
{
      public final static int clubs = 0, 
                              diamonds = 1,
                              hearts = 2,
                              spades = 3;
      
      private int suit;
      private char value;
      private boolean cardError;
      
     
      Card()
      {
         this('A', clubs);
      }
      
      Card(char value, int suit)
      {
         set(value, suit);
      }
      
      Card(Card card)
      {
         this.value = card.value;
         this.suit = card.suit;
      }
      
      private boolean isValid(char value, int suit)
      {
         char upVal;  
         upVal = Character.toUpperCase(value);
         
         if(upVal == 'A' || upVal == 'K'
            || upVal == 'Q' || upVal == 'J'
            || upVal == 'T'
            || (upVal >= '2' && upVal <= '9'))
            
            return true;
         
         else 
            return false;
            
      }
     
      public boolean set(char value, int suit)
      {
         
         if ( isValid(value,suit) )
         { 
            this.value = Character.toUpperCase(value);
            this.suit = suit;
            this.cardError = false;
         }
         else
            this.cardError = true;
           
         return !cardError;     
       
      }
      

      public char getValue()
      {
         return this.value;
      }
      
      public int getSuit()
      {
         return this.suit;
      }
      
      public String sSuit()
      {
         switch(suit)
         {
         case 0: 
            return "Clubs"; 
         case 1: 
            return "Diamonds";
         case 2: 
            return "Hearts";
         case 3: 
            return "Spades";
         default: 
            return "??";
         }
      }
      public String toString()
      {
         String retVal;
         retVal =  String.valueOf(value);
         
         if (!set(value,suit))
            return "This card value " + retVal + "is invalid.";
         else 
            return " " + retVal + " of " + sSuit() + " / ";
      }
      
     
      boolean equals(Card card)
      {
         if(this.value == card.value && this.suit == card.suit)
            return cardError = false;
         
         else return cardError = true;
         
      }  

}

//Hand class for players in the card game
public class Hand
{
   public final int MAX_CARDS = 52;
   private int numCards;
   private Card[] myCards;

   Hand()
   { 
      numCards = 0;
      myCards = new Card[MAX_CARDS];
      
      for(int k = 0; k < MAX_CARDS; k++)
      {
         myCards[k] = new Card();
         
      }
   }
   
    
   public int getNum()
   {
      return numCards;
   }
  
   
   Card inspectCard(int k)
   {
      if(k >= 0 && k < getNum())
      {
         char nVal = myCards[k].getValue();
         int suit = myCards[k].getSuit();
         Card temp = new Card(nVal, suit);
         return temp;
      }
      else
         return new Card('S', 2);
     
     
   }
    
   void resetHand()
   {
     numCards = 0;
   }
   
   
  boolean takeCard(Card newCard)
  {
      char nVal = newCard.getValue();
      int suit = newCard.getSuit();
      
      if(numCards < MAX_CARDS) 
      {
         if (myCards[numCards].set(nVal, suit))
            numCards++;
         
         return true;
      }   
 
         return false;
      
   }
   
   
   Card playCard()
   {
      if(myCards.length > 0)
      {
         Card temp = myCards[numCards-1];
         numCards --;
         System.out.println("Playing " + temp.toString());
         return temp;
      }
      return null;
   }
   
   
   public String toString()
   {
      String result = "\n This hand has: \n";
      for (int i = 0; i < numCards; i++)
      {
         result += myCards[i].toString();
      }
     return result;
   }
     
   
}

//deck class for dealing cards to hands
import java.util.Random;

public class Deck
{
   private static final int MAX_PACKS = 6;
   private static final int NUM_CARDS_PER_PACK = 52;
   private static final int MAX_CARDS_PER_DECK = MAX_PACKS * NUM_CARDS_PER_PACK;
   
   private static Card[] masterPack;
   
   private static Card[] cards;
   private int numPacks;
   private int topCard;
    
   Deck()
   {
      allocateMasterPack();   
   }
   
   Deck(int numpacks)
   {
      numPacks = numpacks;
      topCard = numPacks * NUM_CARDS_PER_PACK;
      allocateMasterPack(); 
      initializePack(numPacks);
   }
   
   private static void allocateMasterPack()
   {
      int i, k, j, st=0;
      char val;
      if(masterPack != null)
         return;
      masterPack = new Card[NUM_CARDS_PER_PACK];
      
      for (i = 0; i < NUM_CARDS_PER_PACK; i++)
         masterPack[i] = new Card();
      
      for (k = 0; k < 4; k++)
      {
         switch(k)
         {
         case 0: 
            st = Card.clubs; break;
         case 1: 
            st = Card.diamonds; break;
         case 2: 
            st = Card.hearts; break;
         case 3: 
            st = Card.spades; break;  
         }
         
         masterPack[13 * k].set('A', st);
         for (val = '2', j = 1; val <= '9'; val++, j++)
            masterPack[13 * k + j].set(val, st);
         masterPack[13 * k + 9].set('T', st);
         masterPack[13 * k + 10].set('J', st);
         masterPack[13 * k + 11].set('Q', st);
         masterPack[13 * k + 12].set('K', st);
      }
            
   }
   
   public static boolean initializePack(int numPacks)
   { 
      int i, j;
      cards = new Card[numPacks * NUM_CARDS_PER_PACK];
      for (i = 0;i < numPacks;i++)
         for (j=0;j < NUM_CARDS_PER_PACK;j++)
            cards[i * NUM_CARDS_PER_PACK + j] = masterPack[j];
      
      return true;     
   }
   
   
   public void shuffle()
   {
      Random random = new Random();
      for (int i = 0; i < topCard; i++)
      {
         int randIndex = random.nextInt(topCard);
         Card temp = cards[randIndex];
         cards[randIndex] = cards[i];
         cards[i] = temp;
      }
   }
   
   
   public Card dealCard()
   {
      if(topCard > 0)
      {
         Card temp = new Card(cards[topCard - 1]);
         topCard --;
         return temp;
      }
      
      return null;      
   }
   
   
   public int topcard()
   {
      return topCard;
   }
   
   
   public Card inspectCard(int k)
   { 
      if(k >= 0 && k < (numPacks * NUM_CARDS_PER_PACK))
      { 
         Card temp = new Card(cards[numPacks * NUM_CARDS_PER_PACK - 1]);
         return temp;
      }
      else
         return new Card('S', Card.spades);     
        
   }
 }
   
 /* ----------------run from console window--------------------
 
 K of Spades /  Q of Spades /  J of Spades /  T of Spades /  9 of Spades /  8 of
 Spades /  7 of Spades /  6 of Spades /  5 of Spades /  4 of Spades /  3 of Spad
es /  2 of Spades /  A of Spades /  K of Hearts /  Q of Hearts /  J of Hearts / 
 T of Hearts /  9 of Hearts /  8 of Hearts /  7 of Hearts /  6 of Hearts /  5 of
 Hearts /  4 of Hearts /  3 of Hearts /  2 of Hearts /  A of Hearts /  K of Diam
onds /  Q of Diamonds /  J of Diamonds /  T of Diamonds /  9 of Diamonds /  8 of
 Diamonds /  7 of Diamonds /  6 of Diamonds /  5 of Diamonds /  4 of Diamonds / 
 3 of Diamonds /  2 of Diamonds /  A of Diamonds /  K of Clubs /  Q of Clubs /  
J of Clubs /  T of Clubs /  9 of Clubs /  8 of Clubs /  7 of Clubs /  6 of Clubs
 /  5 of Clubs /  4 of Clubs /  3 of Clubs /  2 of Clubs /  A of Clubs /  K of S
pades /  Q of Spades /  J of Spades /  T of Spades /  9 of Spades /  8 of Spades
 /  7 of Spades /  6 of Spades /  5 of Spades /  4 of Spades /  3 of Spades /  2
 of Spades /  A of Spades /  K of Hearts /  Q of Hearts /  J of Hearts /  T of H
earts /  9 of Hearts /  8 of Hearts /  7 of Hearts /  6 of Hearts /  5 of Hearts
 /  4 of Hearts /  3 of Hearts /  2 of Hearts /  A of Hearts /  K of Diamonds / 
 Q of Diamonds /  J of Diamonds /  T of Diamonds /  9 of Diamonds /  8 of Diamon
ds /  7 of Diamonds /  6 of Diamonds /  5 of Diamonds /  4 of Diamonds /  3 of D
iamonds /  2 of Diamonds /  A of Diamonds /  K of Clubs /  Q of Clubs /  J of Cl
ubs /  T of Clubs /  9 of Clubs /  8 of Clubs /  7 of Clubs /  6 of Clubs /  5 o
f Clubs /  4 of Clubs /  3 of Clubs /  2 of Clubs /  A of Clubs / 

 Q of Hearts /  Q of Spades /  6 of Hearts /  J of Spades /  7 of Spades /  Q of
 Clubs /  7 of Clubs /  6 of Clubs /  J of Diamonds /  4 of Diamonds /  T of Spa
des /  4 of Hearts /  J of Clubs /  4 of Clubs /  2 of Diamonds /  A of Diamonds
 /  4 of Spades /  Q of Diamonds /  K of Clubs /  Q of Clubs /  3 of Clubs /  5 
of Clubs /  7 of Spades /  K of Hearts /  2 of Spades /  7 of Hearts /  5 of Spa
des /  7 of Hearts /  5 of Hearts /  A of Clubs /  T of Diamonds /  J of Hearts 
/  5 of Hearts /  9 of Spades /  4 of Spades /  T of Spades /  3 of Clubs /  9 o
f Diamonds /  3 of Spades /  8 of Diamonds /  K of Clubs /  5 of Clubs /  A of C
lubs /  T of Diamonds /  6 of Hearts /  8 of Spades /  2 of Hearts /  2 of Spade
s /  9 of Spades /  4 of Clubs /  4 of Hearts /  3 of Diamonds /  3 of Hearts / 
 K of Spades /  8 of Clubs /  J of Hearts /  2 of Hearts /  6 of Spades /  9 of 
Diamonds /  9 of Hearts /  2 of Diamonds /  2 of Clubs /  8 of Spades /  7 of Di
amonds /  T of Clubs /  A of Hearts /  A of Diamonds /  4 of Diamonds /  T of He
arts /  K of Diamonds /  6 of Diamonds /  J of Clubs /  3 of Spades /  T of Hear
ts /  8 of Diamonds /  8 of Hearts /  6 of Spades /  5 of Diamonds /  J of Diamo
nds /  2 of Clubs /  K of Diamonds /  A of Spades /  Q of Hearts /  6 of Diamond
s /  A of Hearts /  9 of Clubs /  7 of Clubs /  5 of Diamonds /  9 of Clubs /  3
 of Hearts /  A of Spades /  3 of Diamonds /  K of Hearts /  Q of Diamonds /  6 
of Clubs /  K of Spades /  7 of Diamonds /  8 of Clubs /  5 of Spades /  9 of He
arts /  T of Clubs /  Q of Spades /  8 of Hearts /  J of Spades / 

 K of Spades /  Q of Spades /  J of Spades /  T of Spades /  9 of Spades /  8 of
 Spades /  7 of Spades /  6 of Spades /  5 of Spades /  4 of Spades /  3 of Spad
es /  2 of Spades /  A of Spades /  K of Hearts /  Q of Hearts /  J of Hearts / 
 T of Hearts /  9 of Hearts /  8 of Hearts /  7 of Hearts /  6 of Hearts /  5 of
 Hearts /  4 of Hearts /  3 of Hearts /  2 of Hearts /  A of Hearts /  K of Diam
onds /  Q of Diamonds /  J of Diamonds /  T of Diamonds /  9 of Diamonds /  8 of
 Diamonds /  7 of Diamonds /  6 of Diamonds /  5 of Diamonds /  4 of Diamonds / 
 3 of Diamonds /  2 of Diamonds /  A of Diamonds /  K of Clubs /  Q of Clubs /  
J of Clubs /  T of Clubs /  9 of Clubs /  8 of Clubs /  7 of Clubs /  6 of Clubs
 /  5 of Clubs /  4 of Clubs /  3 of Clubs /  2 of Clubs /  A of Clubs / 

 5 of Clubs /  2 of Clubs /  7 of Diamonds /  J of Hearts /  A of Clubs /  2 of 
Spades /  6 of Spades /  Q of Diamonds /  K of Hearts /  3 of Hearts /  J of Spa
des /  8 of Hearts /  A of Diamonds /  T of Hearts /  8 of Diamonds /  Q of Club
s /  T of Spades /  9 of Diamonds /  7 of Clubs /  Q of Spades /  A of Hearts / 
 7 of Spades /  Q of Hearts /  6 of Hearts /  9 of Spades /  4 of Hearts /  5 of
 Hearts /  4 of Diamonds /  8 of Clubs /  9 of Hearts /  6 of Clubs /  T of Diam
onds /  7 of Hearts /  A of Spades /  J of Clubs /  6 of Diamonds /  4 of Spades
 /  5 of Spades /  5 of Diamonds /  J of Diamonds /  3 of Diamonds /  K of Spade
s /  K of Diamonds /  3 of Spades /  3 of Clubs /  K of Clubs /  2 of Diamonds /
  8 of Spades /  T of Clubs /  2 of Hearts /  9 of Clubs /  4 of Clubs / 
  
  How many players in the game? (1 to 10) 

3

 This hand has: 
 K of Spades /  T of Spades /  7 of Spades /  4 of Spades /  A of Spades /  J of
 Hearts /  8 of Hearts /  5 of Hearts /  2 of Hearts /  Q of Diamonds /  9 of Di
amonds /  6 of Diamonds /  3 of Diamonds /  K of Clubs /  T of Clubs /  7 of Clu
bs /  4 of Clubs /  A of Clubs / 

 This hand has: 
 Q of Spades /  9 of Spades /  6 of Spades /  3 of Spades /  K of Hearts /  T of
 Hearts /  7 of Hearts /  4 of Hearts /  A of Hearts /  J of Diamonds /  8 of Di
amonds /  5 of Diamonds /  2 of Diamonds /  Q of Clubs /  9 of Clubs /  6 of Clu
bs /  3 of Clubs / 

 This hand has: 
 J of Spades /  8 of Spades /  5 of Spades /  2 of Spades /  Q of Hearts /  9 of
 Hearts /  6 of Hearts /  3 of Hearts /  K of Diamonds /  T of Diamonds /  7 of 
Diamonds /  4 of Diamonds /  A of Diamonds /  J of Clubs /  8 of Clubs /  5 of C
lubs /  2 of Clubs / 

 Here are hands from shuffled deck

 This hand has: 
 7 of Diamonds /  2 of Diamonds /  3 of Hearts /  2 of Clubs /  8 of Hearts /  7
 of Clubs /  9 of Spades /  7 of Spades /  3 of Diamonds /  J of Hearts /  T of 
Diamonds /  4 of Hearts /  9 of Diamonds /  9 of Hearts /  3 of Spades /  5 of S
pades /  T of Clubs /  K of Hearts / 

 This hand has: 
 8 of Spades /  Q of Diamonds /  5 of Clubs /  9 of Clubs /  5 of Hearts /  8 of
 Clubs /  4 of Spades /  Q of Spades /  3 of Clubs /  K of Spades /  2 of Spades
 /  J of Clubs /  6 of Clubs /  7 of Hearts /  K of Diamonds /  8 of Diamonds / 
 A of Diamonds / 

 This hand has: 
 A of Clubs /  T of Spades /  J of Spades /  4 of Clubs /  A of Hearts /  Q of H
earts /  A of Spades /  6 of Hearts /  T of Hearts /  2 of Hearts /  J of Diamon
ds /  Q of Clubs /  6 of Diamonds /  5 of Diamonds /  6 of Spades /  4 of Diamon
ds /  K of Clubs / 


-----------------------------------------------*/
   
   


